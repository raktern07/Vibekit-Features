---
description: 
globs: 
alwaysApply: true
---
# Arbitrum Vibekit Agent Creation Guide

_A comprehensive guide for creating on-chain AI agents using the Arbitrum Vibekit framework - enabling vibe coding (AI-generated working code) in minutes._

## Core Principles

1. **Continuous Learning**: When users correct assumptions or suggest improvements, ask if they should be incorporated into this guide
2. **No Hacks**: Always prioritize robust, idiomatic solutions over workarounds (e.g., avoid stubbing `*.d.ts` files)
3. **Framework First**: Use Vibekit patterns and abstractions rather than custom implementations

## Architecture Overview

- Agents are MCP servers themselves
- Agents have internal tools and can also use external MCP tools to perform actions
- MCP server connections:
  - **Remote**: SSE/WebSocket via URL
  - **Local**: STDIO via files in `typescript/lib/mcp-tools/`
- Agents live in `typescript/templates/`, external service tools in `typescript/lib/mcp-tools/`
- **Each skill is served as a tool of the agent's own MCP server**

## Skill and Tool Design

### Fundamental Concepts

| Concept | Definition | Example |
|---------|------------|---------|
| **Skills** | External capabilities (what agents can do) | "Lending Operations", "Trading" |
| **Tools** | Internal actions (how skills work) | supply, borrow, swap, approve |
| **LLM** | Intent router and orchestrator | Routes "lend me 100 USDC" → borrowTool |

### Design Philosophy

Skills follow the A2A (Agent-to-Agent) protocol:
- **One Skill = One Capability** - Each skill represents a cohesive capability
- **Opaque Implementation** - Internal workings hidden from callers
- **Clear Interface** - Well-defined inputs and outputs

The framework is designed to be:
- **Accessible** - Clear patterns for beginners
- **Flexible** - Complex orchestrations for advanced users
- **Extensible** - Easy to add tools without breaking changes

### Skills vs Tools: External vs Internal

- **Skills** are the external interface - what other agents and users see
- **Tools** are internal implementation details - how the skill accomplishes its capability
- This separation allows you to refactor tools without changing the skill's public interface

### Required Skill Metadata

```typescript
export const lendingSkill = defineSkill({
  id: 'lending-operations',
  name: 'Lending Operations',
  description: 'Perform lending operations on Aave protocol',    // Required
  tags: ['defi', 'lending', 'aave'],                            // Min 1 tag
  examples: ['Supply 100 USDC to Aave', 'Borrow 50 DAI'],      // Min 1 example
  inputSchema: z.object({ instruction: z.string() }),
  tools: [supplyTool, borrowTool, repayTool, withdrawTool]
});
```

## Implementation Patterns

### When to Use Multiple Tools

Use multiple tools when actions are:
- **Independent** - Users might want just one
- **Composable** - Can be mixed based on needs
- **Distinct** - Require different intent interpretation

```typescript
// Good: Independent lending actions
tools: [supplyTool, borrowTool, repayTool, withdrawTool]
```

### When to Use Workflow Tools

Create workflow tools for multi-step processes that always occur together:

```typescript
// Good: Swap always requires quote → approve → execute
tools: [executeSwapWorkflow]

// Bad: Exposing internal steps as separate tools
tools: [getQuoteTool, approveTokenTool, executeSwapTool]
```

### LLM Orchestration Capabilities

Beyond simple routing, the LLM handles:
1. **Intent Routing** - Selecting appropriate tools
2. **Sequential Execution** - Planning multi-tool operations
3. **Conditional Logic** - Using results to determine next steps
4. **Result Aggregation** - Combining outputs coherently
5. **Error Recovery** - Handling failures gracefully

Example of full orchestration:
```typescript
export const portfolioAnalysisSkill = defineSkill({
  id: 'portfolio-analysis',
  name: 'Portfolio Analysis',
  description: 'Analyze crypto portfolio performance and provide insights',
  tools: [
    getHoldingsTool,           // User: "What tokens do I own?"
    getPriceDataTool,          // User: "What's the price of ETH?"
    analyzePerformanceWorkflow,// User: "How's my portfolio doing?" (fetches → calculates → formats)
    suggestRebalanceTool,      // User: "How should I rebalance?"
    exportDataTool             // User: "Export my portfolio data"
  ]
});

// User: "Analyze my portfolio and suggest improvements"
// LLM orchestration:
// 1. Calls getHoldingsTool to see what they own
// 2. Calls analyzePerformanceWorkflow (which internally handles:
//    - Fetching current prices
//    - Calculating metrics
//    - Generating formatted analysis)
// 3. Based on the analysis results, calls suggestRebalanceTool
// 4. Aggregates all outputs into a comprehensive response
```

The LLM handles:
- **Planning**: Determining which tools to use and in what order
- **Data Flow**: Passing results from one tool to the next
- **Decision Making**: Choosing whether to call additional tools based on results
- **Error Recovery**: Handling failures and trying alternatives

### Single-Tool Skills (Recommended Default)

Even with one tool, use the tool pattern for future flexibility:

```typescript
export const tokenSwapSkill = defineSkill({
  id: 'token-swap',
  name: 'Token Swap',
  description: 'Swap tokens on DEX',
  tools: [executeSwapWorkflow] // Easy to add more tools later
});
```

### Workflow Tools vs Regular Tools

A skill can mix both types:
- **Workflow tools**: Encapsulate multi-step processes (quote → approve → swap)
- **Regular tools**: Single actions (check price, cancel order)

Example:
```typescript
export const tradingSkill = defineSkill({
  id: 'advanced-trading',
  name: 'Advanced Trading',
  tools: [
    executeMarketOrderWorkflow,  // Workflow: validate → execute → confirm
    executeLimitOrderWorkflow,   // Workflow: validate → place → monitor
    cancelOrder,                 // Single action
    checkOrderStatus,            // Single action
    getMarketDepth              // Single action
  ]
});
```

### Manual Handlers (Use Sparingly)

Only use manual handlers when the entire skill can be defined deterministically without any need for tool routing or orchestration:
- The skill's complete behavior is self-contained
- No LLM interpretation or routing is necessary
- The skill will never need orchestration capabilities

```typescript
// Rare example: Pure computation - entire skill is deterministic
export const mathSkill = defineSkill({
  id: 'calculator',
  name: 'Math Calculator',
  inputSchema: z.object({ expression: z.string() }),
  tools: [calculateTool], // Required by framework
  handler: async (input) => {
    // Entire skill behavior defined here - no orchestration needed
    const result = evaluate(input.expression);
    return createSuccessTask('calc', { result });
  }
});
```

## Decision Framework

1. **Multiple independent actions?** → Multiple tools
2. **One action now, maybe more later?** → Single tool (not handler)
3. **Actions that always occur together?** → Workflow tool
4. **Pure deterministic computation?** → Manual handler (rare)

## Common Patterns

### Multi-Tool Skills
- **DeFi**: supply, borrow, repay, withdraw, claim
- **Trading**: buy, sell, limit/stop orders
- **Governance**: propose, vote, delegate, claim

### Single-Tool Skills  
- **Swapping**: executeSwapWorkflow
- **Analytics**: analyzePortfolioWorkflow
- **Minting**: mintNFTWorkflow

### Mixed Patterns
- **Advanced Trading**: Order workflows + status/cancel tools
- **Portfolio Management**: Rebalance workflow + position adjustments
- **Liquidity Provision**: Add/remove liquidity workflows + reward claims

### Manual Handler Skills (Rare)
- **Pure Math**: Calculations that are entirely deterministic
- **Hash Functions**: Deterministic cryptographic operations with no orchestration needed
- **Static Data**: Hardcoded constants or configuration values that never change

## Anti-Patterns to Avoid

**Don't bypass LLM for cost savings:**
```typescript
// Wrong - reimplements routing poorly
handler: async (input) => {
  if (input.action === 'supply') return supply();
  if (input.action === 'borrow') return borrow();
}
```

**Don't expose internal steps:**
```typescript
// Wrong - these aren't user-facing
tools: [validateInputTool, checkBalanceTool, calculateFeeTool]
```

**Don't separate coupled operations:**
```typescript
// Wrong - these always happen together
tools: [getQuoteTool, approveTokenTool, executeSwapTool]
// Right - single workflow
tools: [executeSwapWorkflow]
```

## Technical Stack

### Core Dependencies
- **Build System**: pnpm workspace (root: `typescript/`)
- **AI Framework**: Vercel AI SDK (`ai`) with OpenRouter provider (`@openrouter/ai-sdk-provider`)
- **Protocol**: Model Context Protocol (MCP) SDK (`@modelcontextprotocol/sdk`)
- **Blockchain**: Viem (`viem`), OpenZeppelin (`@openzeppelin/contracts`)

### Workspace Structure
- `typescript/templates/` - Fully functional agents
- `typescript/lib/` - Supporting packages and MCP tools
- Two workspace package directories: `typescript/templates/` for fully functional AI agents and `typescript/lib/` for supporting packages
- Key packages: `arbitrum-vibekit-core`, `ember-mcp-tool-server`

## Setup Instructions

```bash
# From typescript/ directory
pnpm install
pnpm build

# From agent directory
pnpm dev
```

## Typical Agent Directory Structure

```
agent-name/
├── src/
│   ├── index.ts          # Agent entry point and MCP server setup
│   ├── skills/           # Skill definitions (high-level capabilities)
│   │   ├── lending.ts    # Example: lending skill with multiple tools
│   │   ├── trading.ts    # Example: trading skill
│   │   └── analytics.ts  # Example: analytics skill
│   ├── tools/            # Tool implementations (actions)
│   │   ├── supply.ts     # Example: supply tool
│   │   ├── borrow.ts     # Example: borrow tool
│   │   └── swap.ts       # Example: swap workflow tool
│   ├── hooks/            # Tool enhancement hooks (optional)
│   │   └── index.ts      # Before/after hooks for tools
│   └── context/          # Shared context and types (optional)
│       ├── provider.ts   # Context provider
│       └── types.ts      # Type definitions
├── test/                 # Test files
├── package.json          # Agent dependencies
├── tsconfig.json         # TypeScript configuration
└── README.md            # Agent documentation
```

### Directory Purposes:
- **skills/**: Define high-level capabilities exposed as MCP tools. Each skill groups related tools.
- **tools/**: Implement the actual actions. Tools are internal to skills and handle specific operations.
- **hooks/**: Optional enhancement functions that can modify tool inputs/outputs or add logging.
- **context/**: Optional shared state and type definitions used across the agent.
- **index.ts**: Sets up the MCP server and registers all skills.
